version: '3.7'

services:
  postgresql:
    image: postgres:16
    container_name: app-postgresql-${BUILD_ENV}
    restart: unless-stopped
    ports:
      - '${PORTGRES_PORT}:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASE=core_svc,auth_svc,post_svc
    healthcheck:
      test: ['CMD-SHELL', "sh -c 'pg_isready -U ${POSTGRES_USER} -d postgres'"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ${POSTGRES_VOL}:/var/lib/postgresql/data
      - ./scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - app-network

  redis:
    image: redis/redis-stack-server
    container_name: app-redis-cache-${BUILD_ENV}
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
    volumes:
      - ${REDIS_CACHE_VOL:-app_redis-cache-data}:/data
      - .conf/redis/redis-cache.conf:/redis-stack.conf
    expose:
      - 6379
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: app-rabbitmq-${BUILD_ENV}
    restart: unless-stopped
    expose:
      - 5672
    ports:
      - '${RABBIT_MQ_UI_PORT}:15672'
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - app-network

  # nginx:
  #   image: nginx:1.23.2-alpine
  #   container_name: app-nginx-${BUILD_ENV}
  #   depends_on:
  #     - auth_svc
  #     - post_svc
  #     - core_svc
  #   volumes:
  #     - ./conf/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
  #   networks:
  #     - app-network
  #   ports:
  #     - '${NGINX_PORT}:80'

  # app_svc:
  #   build:
  #     context: .
  #     target: development 
  #   restart:  unless-stopped
  #   container_name: app_svc
  #   depends_on:
  #     - redis
  #     - postgresql
  #     - rabbitmq
  #   ports:
  #     - "3000:3000"
  #   command: sh -c "npm install && npm run start:${MODE:-dev}"
  #   environment:
  #     - NODE_ENV=development
  #   env_file:
  #     - ./.env
  #   networks:
  #     - app-network

  # core_svc:
  #   build:
  #     context: ./apps/core-svc
  #     target: development 
  #   restart:  unless-stopped
  #   container_name: core_svc
  #   depends_on:
  #     - redis
  #     - postgresql
  #     - rabbitmq
  #   ports:
  #     - "3000:3000"
  #   command: sh -c "npm install && npm run start:${MODE:-dev}"
  #   environment:
  #     - NODE_ENV=development
  #   env_file:
  #     - ./.env
  #   networks:
  #     - app-network

  # post_svc:
  #   build:
  #     context: ./apps/post-svc
  #     target: development 
  #   restart:  unless-stopped
  #   container_name: post_svc
  #   depends_on:
  #     - redis
  #     - postgresql
  #     - rabbitmq
  #   ports:
  #     - "3002:3000"
  #   command: sh -c "npm install && npm run start:${MODE:-dev}"
  #   environment:
  #     - NODE_ENV=development
  #   env_file:
  #     - ./.env
  #   networks:
  #     - app-network
  
  # swagger:
  #   image: swaggerapi/swagger-ui
  #   container_name: app-swagger
  #   ports:
  #     - 8080:8080
  #   environment:
  #     - 'URLS=[{url: "${API_HOST:-http://localhost:8000}/core/api-docs", name: "Core Service"},{url: "${API_HOST:-http://localhost:8000}/auth/api-docs", name: "Authorization Service"},{url: "${API_HOST:-http://localhost:8000}/post/api-docs", name: "Post Service"}]'

#Docker Networks  
networks:
  app-network:
    driver: bridge

#Volumes:
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local